
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  0000072a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154e  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ddc  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000600  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab5  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
  8a:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
			}
		}
	 
}
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	DIO_readpinvalue(PORT_A,1,&green);
  b4:	4d e6       	ldi	r20, 0x6D	; 109
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_readpinvalue>
	DIO_readpinvalue(PORT_A,0,&yellaw);
  c0:	4f e6       	ldi	r20, 0x6F	; 111
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_readpinvalue>
	DIO_readpinvalue(PORT_B,1,&red);
  cc:	4e e6       	ldi	r20, 0x6E	; 110
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e4       	ldi	r24, 0x42	; 66
  d4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_readpinvalue>
	if(yellaw==HIGH)
  d8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <yellaw>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	19 f4       	brne	.+6      	; 0xe6 <__vector_1+0x54>
	{
		
		//	_delay();
		state=1;
  e0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  e4:	0c c0       	rjmp	.+24     	; 0xfe <__vector_1+0x6c>
	}
	else if(green==HIGH)
  e6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <green>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	41 f4       	brne	.+16     	; 0xfe <__vector_1+0x6c>
	{
		led_of(PORT_A,0,source);
  ee:	48 e0       	ldi	r20, 0x08	; 8
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 90 00 	call	0x120	; 0x120 <led_of>
		state=2;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	
	}
  fe:	ff 91       	pop	r31
 100:	ef 91       	pop	r30
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <led_of>:
	return LocalErrorstate;
}
ES_t led_of(uint8_t ledport,uint8_t ledpin,uint8_t type_connection)
{
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
 120:	9f eb       	ldi	r25, 0xBF	; 191
 122:	98 0f       	add	r25, r24
 124:	94 30       	cpi	r25, 0x04	; 4
 126:	70 f4       	brcc	.+28     	; 0x144 <led_of+0x24>
	{
		if(type_connection==source)//source
 128:	48 30       	cpi	r20, 0x08	; 8
 12a:	29 f4       	brne	.+10     	; 0x136 <led_of+0x16>
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
	{
		if(type_connection==source)//source
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
		}
		else if(type_connection==sink)
 136:	49 30       	cpi	r20, 0x09	; 9
 138:	39 f4       	brne	.+14     	; 0x148 <led_of+0x28>
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		}
		LocalErrorstate=ES_OK;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
 148:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LocalErrorstate=ES_NOK;
	}
	return LocalErrorstate;
}
 14a:	08 95       	ret

0000014c <Seven_Segment_enInit>:
		#endif
	#else
		LocalenErrorstate=ES_NOK;
	#endif
	return LocalenErrorstate;
}
 14c:	cf 93       	push	r28
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	82 e4       	ldi	r24, 0x42	; 66
 154:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	11 f0       	breq	.+4      	; 0x160 <Seven_Segment_enInit+0x14>
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	01 c0       	rjmp	.+2      	; 0x162 <Seven_Segment_enInit+0x16>
 160:	c1 e0       	ldi	r28, 0x01	; 1
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	84 e4       	ldi	r24, 0x44	; 68
 168:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	09 f4       	brne	.+2      	; 0x172 <Seven_Segment_enInit+0x26>
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	09 f4       	brne	.+2      	; 0x182 <Seven_Segment_enInit+0x36>
 180:	cf 5f       	subi	r28, 0xFF	; 255
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f4       	brne	.+2      	; 0x192 <Seven_Segment_enInit+0x46>
 190:	cf 5f       	subi	r28, 0xFF	; 255
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	83 e4       	ldi	r24, 0x43	; 67
 198:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <Seven_Segment_enInit+0x56>
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	67 e0       	ldi	r22, 0x07	; 7
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <Seven_Segment_enInit+0x66>
 1b0:	cf 5f       	subi	r28, 0xFF	; 255
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	83 e4       	ldi	r24, 0x43	; 67
 1b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <Seven_Segment_enInit+0x76>
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	67 e0       	ldi	r22, 0x07	; 7
 1c6:	84 e4       	ldi	r24, 0x44	; 68
 1c8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 1cc:	c7 30       	cpi	r28, 0x07	; 7
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <Seven_Segment_enInit+0x88>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <Seven_Segment_enInit+0x8a>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <Seven_Segment_enDisplayNum>:
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	c8 2f       	mov	r28, r24
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	fe 01       	movw	r30, r28
 1e6:	e0 5a       	subi	r30, 0xA0	; 160
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	40 81       	ld	r20, Z
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	48 27       	eor	r20, r24
 1f0:	41 70       	andi	r20, 0x01	; 1
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	11 f0       	breq	.+4      	; 0x202 <Seven_Segment_enDisplayNum+0x28>
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	01 c0       	rjmp	.+2      	; 0x204 <Seven_Segment_enDisplayNum+0x2a>
 202:	11 e0       	ldi	r17, 0x01	; 1
 204:	fe 01       	movw	r30, r28
 206:	e0 5a       	subi	r30, 0xA0	; 160
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	40 81       	ld	r20, Z
 20c:	46 95       	lsr	r20
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	48 27       	eor	r20, r24
 212:	41 70       	andi	r20, 0x01	; 1
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	84 e4       	ldi	r24, 0x44	; 68
 218:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	09 f4       	brne	.+2      	; 0x222 <Seven_Segment_enDisplayNum+0x48>
 220:	1f 5f       	subi	r17, 0xFF	; 255
 222:	fe 01       	movw	r30, r28
 224:	e0 5a       	subi	r30, 0xA0	; 160
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	40 81       	ld	r20, Z
 22a:	46 95       	lsr	r20
 22c:	46 95       	lsr	r20
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	48 27       	eor	r20, r24
 232:	41 70       	andi	r20, 0x01	; 1
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	09 f4       	brne	.+2      	; 0x242 <Seven_Segment_enDisplayNum+0x68>
 240:	1f 5f       	subi	r17, 0xFF	; 255
 242:	fe 01       	movw	r30, r28
 244:	e0 5a       	subi	r30, 0xA0	; 160
 246:	ff 4f       	sbci	r31, 0xFF	; 255
 248:	40 81       	ld	r20, Z
 24a:	46 95       	lsr	r20
 24c:	46 95       	lsr	r20
 24e:	46 95       	lsr	r20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	48 27       	eor	r20, r24
 254:	41 70       	andi	r20, 0x01	; 1
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	09 f4       	brne	.+2      	; 0x264 <Seven_Segment_enDisplayNum+0x8a>
 262:	1f 5f       	subi	r17, 0xFF	; 255
 264:	fe 01       	movw	r30, r28
 266:	e0 5a       	subi	r30, 0xA0	; 160
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	40 81       	ld	r20, Z
 26c:	42 95       	swap	r20
 26e:	4f 70       	andi	r20, 0x0F	; 15
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	48 27       	eor	r20, r24
 274:	41 70       	andi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	83 e4       	ldi	r24, 0x43	; 67
 27a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	09 f4       	brne	.+2      	; 0x284 <Seven_Segment_enDisplayNum+0xaa>
 282:	1f 5f       	subi	r17, 0xFF	; 255
 284:	fe 01       	movw	r30, r28
 286:	e0 5a       	subi	r30, 0xA0	; 160
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	40 81       	ld	r20, Z
 28c:	42 95       	swap	r20
 28e:	46 95       	lsr	r20
 290:	47 70       	andi	r20, 0x07	; 7
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	48 27       	eor	r20, r24
 296:	41 70       	andi	r20, 0x01	; 1
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <Seven_Segment_enDisplayNum+0xcc>
 2a4:	1f 5f       	subi	r17, 0xFF	; 255
 2a6:	c0 5a       	subi	r28, 0xA0	; 160
 2a8:	df 4f       	sbci	r29, 0xFF	; 255
 2aa:	48 81       	ld	r20, Y
 2ac:	42 95       	swap	r20
 2ae:	46 95       	lsr	r20
 2b0:	46 95       	lsr	r20
 2b2:	43 70       	andi	r20, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	48 27       	eor	r20, r24
 2b8:	41 70       	andi	r20, 0x01	; 1
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	83 e4       	ldi	r24, 0x43	; 67
 2be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <Seven_Segment_enDisplayNum+0xee>
 2c6:	1f 5f       	subi	r17, 0xFF	; 255
 2c8:	17 30       	cpi	r17, 0x07	; 7
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <Seven_Segment_enDisplayNum+0xf6>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <Seven_Segment_enDisplayNum+0xf8>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	08 95       	ret

000002da <Seven_Segment_enTurnOf>:
 2da:	cf 93       	push	r28
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	11 f0       	breq	.+4      	; 0x2ee <Seven_Segment_enTurnOf+0x14>
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <Seven_Segment_enTurnOf+0x16>
 2ee:	c1 e0       	ldi	r28, 0x01	; 1
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	84 e4       	ldi	r24, 0x44	; 68
 2f6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	09 f4       	brne	.+2      	; 0x300 <Seven_Segment_enTurnOf+0x26>
 2fe:	cf 5f       	subi	r28, 0xFF	; 255
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	64 e0       	ldi	r22, 0x04	; 4
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	09 f4       	brne	.+2      	; 0x310 <Seven_Segment_enTurnOf+0x36>
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	82 e4       	ldi	r24, 0x42	; 66
 316:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	09 f4       	brne	.+2      	; 0x320 <Seven_Segment_enTurnOf+0x46>
 31e:	cf 5f       	subi	r28, 0xFF	; 255
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	83 e4       	ldi	r24, 0x43	; 67
 326:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	09 f4       	brne	.+2      	; 0x330 <Seven_Segment_enTurnOf+0x56>
 32e:	cf 5f       	subi	r28, 0xFF	; 255
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	81 e4       	ldi	r24, 0x41	; 65
 336:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f4       	brne	.+2      	; 0x340 <Seven_Segment_enTurnOf+0x66>
 33e:	cf 5f       	subi	r28, 0xFF	; 255
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	83 e4       	ldi	r24, 0x43	; 67
 346:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_SetPinDirection>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	09 f4       	brne	.+2      	; 0x350 <Seven_Segment_enTurnOf+0x76>
 34e:	cf 5f       	subi	r28, 0xFF	; 255
 350:	c7 30       	cpi	r28, 0x07	; 7
 352:	11 f4       	brne	.+4      	; 0x358 <Seven_Segment_enTurnOf+0x7e>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	01 c0       	rjmp	.+2      	; 0x35a <Seven_Segment_enTurnOf+0x80>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <Seven_Segment_enEnableCommon>:
	#if SEG_COMMON <= PIN7 && SEG_CMN_PORT>='A' && SEG_CMN_PORT<='D'
		#if SEG_TYPE == COMMON_CATHODE
			DIO_SetPinValue(SEG_CMN_PORT,SEG_COMMON,LOW);
			LocalenErrorstate=ES_OK;
		#elif SEG_TYPE==COMMON_ANODE
			 DIO_SetPinValue(SEG_CMN_PORT,SEG_COMMON,HIGH);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	67 e0       	ldi	r22, 0x07	; 7
 362:	84 e4       	ldi	r24, 0x44	; 68
 364:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		#endif
	#else
		LocalenErrorstate=ES_NOK;
	#endif
	return LocalenErrorstate;
}
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret

0000036c <main>:
uint8_t one,deic;
uint8_t val;*/
int main(void)
{
	ES_t error;
	error=Seven_Segment_enInit();
 36c:	0e 94 a6 00 	call	0x14c	; 0x14c <Seven_Segment_enInit>
 370:	18 2f       	mov	r17, r24
   Seven_Segment_enEnableCommon();
 372:	0e 94 af 01 	call	0x35e	; 0x35e <Seven_Segment_enEnableCommon>
	while(1)
	{
		 Seven_Segment_enTurnOf();
 376:	0e 94 6d 01 	call	0x2da	; 0x2da <Seven_Segment_enTurnOf>
		 _delay();
 37a:	0e 94 25 03 	call	0x64a	; 0x64a <_delay>
		 _delay();
 37e:	0e 94 25 03 	call	0x64a	; 0x64a <_delay>
		 _delay();
 382:	0e 94 25 03 	call	0x64a	; 0x64a <_delay>
		if(error==ES_OK)
 386:	11 30       	cpi	r17, 0x01	; 1
 388:	b1 f7       	brne	.-20     	; 0x376 <main+0xa>
 38a:	07 c0       	rjmp	.+14     	; 0x39a <main+0x2e>
		{
		   for(int i=0;i<10;i++)
		   {
			   Seven_Segment_enDisplayNum(i);
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 ed 00 	call	0x1da	; 0x1da <Seven_Segment_enDisplayNum>
			   _delay();
 392:	0e 94 25 03 	call	0x64a	; 0x64a <_delay>
		 _delay();
		 _delay();
		 _delay();
		if(error==ES_OK)
		{
		   for(int i=0;i<10;i++)
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	02 c0       	rjmp	.+4      	; 0x39e <main+0x32>
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	ca 30       	cpi	r28, 0x0A	; 10
 3a0:	d1 05       	cpc	r29, r1
 3a2:	a4 f3       	brlt	.-24     	; 0x38c <main+0x20>
 3a4:	e8 cf       	rjmp	.-48     	; 0x376 <main+0xa>

000003a6 <DIO_SetPinDirection>:
	return Local_enErrorstate;
}
ES_t DIO_SetPinDirection(uint8_t portnumber,uint8_t pinnumber,uint8_t direction)
{
	ES_t Local_Errorstate;
	if(portnumber>='A' && portnumber<='D' && direction<=OUT)
 3a6:	9f eb       	ldi	r25, 0xBF	; 191
 3a8:	98 0f       	add	r25, r24
 3aa:	94 30       	cpi	r25, 0x04	; 4
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <DIO_SetPinDirection+0xa>
 3ae:	86 c0       	rjmp	.+268    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 3b0:	42 30       	cpi	r20, 0x02	; 2
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <DIO_SetPinDirection+0x10>
 3b4:	85 c0       	rjmp	.+266    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
	{
	 switch(portnumber)
 3b6:	82 34       	cpi	r24, 0x42	; 66
 3b8:	49 f1       	breq	.+82     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <DIO_SetPinDirection+0x1c>
 3bc:	81 34       	cpi	r24, 0x41	; 65
 3be:	41 f0       	breq	.+16     	; 0x3d0 <DIO_SetPinDirection+0x2a>
 3c0:	81 c0       	rjmp	.+258    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 3c2:	83 34       	cpi	r24, 0x43	; 67
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <DIO_SetPinDirection+0x22>
 3c6:	40 c0       	rjmp	.+128    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3c8:	84 34       	cpi	r24, 0x44	; 68
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_SetPinDirection+0x28>
 3cc:	5a c0       	rjmp	.+180    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 3ce:	7a c0       	rjmp	.+244    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
	 {
		case PORT_A:
		    if(direction==IN)
 3d0:	41 11       	cpse	r20, r1
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <DIO_SetPinDirection+0x48>
			{
				DDRA &= ~(1<<pinnumber);
 3d4:	2a b3       	in	r18, 0x1a	; 26
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinDirection+0x3a>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinDirection+0x36>
 3e4:	80 95       	com	r24
 3e6:	82 23       	and	r24, r18
 3e8:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret
		case PORT_A:
		    if(direction==IN)
			{
				DDRA &= ~(1<<pinnumber);
			}
			else if(direction==OUT)
 3ee:	41 30       	cpi	r20, 0x01	; 1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <DIO_SetPinDirection+0x4e>
 3f2:	6a c0       	rjmp	.+212    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			{
				DDRA |=(1<<pinnumber);
 3f4:	2a b3       	in	r18, 0x1a	; 26
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_SetPinDirection+0x56>
 404:	82 2b       	or	r24, r18
 406:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
			{
				DDRA |=(1<<pinnumber);
			}
		break;
		case PORT_B:
		    if(direction==IN)
 40c:	41 11       	cpse	r20, r1
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		    {
			    DDRB &= ~(1<<pinnumber);
 410:	27 b3       	in	r18, 0x17	; 23
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	82 23       	and	r24, r18
 424:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	08 95       	ret
		case PORT_B:
		    if(direction==IN)
		    {
			    DDRB &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
 42a:	41 30       	cpi	r20, 0x01	; 1
 42c:	09 f0       	breq	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	4e c0       	rjmp	.+156    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
		    {
			    DDRB |=(1<<pinnumber);
 430:	27 b3       	in	r18, 0x17	; 23
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret
		    {
			    DDRB |=(1<<pinnumber);
		    }
		break;
		case PORT_C:
		    if(direction==IN)
 448:	41 11       	cpse	r20, r1
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		    {
			    DDRC &= ~(1<<pinnumber);
 44c:	24 b3       	in	r18, 0x14	; 20
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	80 95       	com	r24
 45e:	82 23       	and	r24, r18
 460:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	08 95       	ret
		case PORT_C:
		    if(direction==IN)
		    {
			    DDRC &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
 466:	41 30       	cpi	r20, 0x01	; 1
 468:	99 f5       	brne	.+102    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
		    {
			    DDRC |=(1<<pinnumber);
 46a:	24 b3       	in	r18, 0x14	; 20
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	82 2b       	or	r24, r18
 47c:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
		    {
			    DDRC |=(1<<pinnumber);
		    }
		break;
		case PORT_D:
		    if(direction==IN)
 482:	41 11       	cpse	r20, r1
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		    {
			    DDRD &= ~(1<<pinnumber);
 486:	21 b3       	in	r18, 0x11	; 17
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	81 bb       	out	0x11, r24	; 17
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	08 95       	ret
		case PORT_D:
		    if(direction==IN)
		    {
			    DDRD &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	c1 f4       	brne	.+48     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		    {
			    DDRD |=(1<<pinnumber);
 4a4:	21 b3       	in	r18, 0x11	; 17
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	82 2b       	or	r24, r18
 4b6:	81 bb       	out	0x11, r24	; 17
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret
  }
  else
  {
	  Local_Errorstate = ES_NOK;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	08 95       	ret
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
  else
  {
	  Local_Errorstate = ES_NOK;
  }
  return Local_Errorstate;
}
 4d6:	08 95       	ret

000004d8 <DIO_SetPinValue>:
ES_t DIO_SetPinValue(uint8_t portnumber,uint8_t pinnumber,uint8_t value)
{
	ES_t Local_Errorstate;
    if(portnumber>='A' && portnumber<='D' && value<=OUT)
 4d8:	9f eb       	ldi	r25, 0xBF	; 191
 4da:	98 0f       	add	r25, r24
 4dc:	94 30       	cpi	r25, 0x04	; 4
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <DIO_SetPinValue+0xa>
 4e0:	6b c0       	rjmp	.+214    	; 0x5b8 <DIO_SetPinValue+0xe0>
 4e2:	42 30       	cpi	r20, 0x02	; 2
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <DIO_SetPinValue+0x10>
 4e6:	6a c0       	rjmp	.+212    	; 0x5bc <DIO_SetPinValue+0xe4>
    {
		switch(portnumber)
 4e8:	82 34       	cpi	r24, 0x42	; 66
 4ea:	09 f1       	breq	.+66     	; 0x52e <DIO_SetPinValue+0x56>
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <DIO_SetPinValue+0x1c>
 4ee:	81 34       	cpi	r24, 0x41	; 65
 4f0:	39 f0       	breq	.+14     	; 0x500 <DIO_SetPinValue+0x28>
 4f2:	66 c0       	rjmp	.+204    	; 0x5c0 <DIO_SetPinValue+0xe8>
 4f4:	83 34       	cpi	r24, 0x43	; 67
 4f6:	91 f1       	breq	.+100    	; 0x55c <DIO_SetPinValue+0x84>
 4f8:	84 34       	cpi	r24, 0x44	; 68
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_SetPinValue+0x26>
 4fc:	46 c0       	rjmp	.+140    	; 0x58a <DIO_SetPinValue+0xb2>
 4fe:	60 c0       	rjmp	.+192    	; 0x5c0 <DIO_SetPinValue+0xe8>
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
 500:	2b b3       	in	r18, 0x1b	; 27
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	06 2e       	mov	r0, r22
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_SetPinValue+0x36>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_SetPinValue+0x32>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	8b bb       	out	0x1b, r24	; 27
				PORTA |=(value<<pinnumber);	
 518:	8b b3       	in	r24, 0x1b	; 27
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_SetPinValue+0x4a>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_SetPinValue+0x46>
 526:	48 2b       	or	r20, r24
 528:	4b bb       	out	0x1b, r20	; 27
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
 52a:	81 e0       	ldi	r24, 0x01	; 1
		switch(portnumber)
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
				PORTA |=(value<<pinnumber);	
			    break;
 52c:	08 95       	ret
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
 52e:	28 b3       	in	r18, 0x18	; 24
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	06 2e       	mov	r0, r22
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_SetPinValue+0x64>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_SetPinValue+0x60>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	88 bb       	out	0x18, r24	; 24
				PORTB |=(value<<pinnumber);
 546:	88 b3       	in	r24, 0x18	; 24
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_SetPinValue+0x78>
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_SetPinValue+0x74>
 554:	48 2b       	or	r20, r24
 556:	48 bb       	out	0x18, r20	; 24
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
 558:	81 e0       	ldi	r24, 0x01	; 1
				PORTA |=(value<<pinnumber);	
			    break;
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
				PORTB |=(value<<pinnumber);
				break;
 55a:	08 95       	ret
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
 55c:	25 b3       	in	r18, 0x15	; 21
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	06 2e       	mov	r0, r22
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_SetPinValue+0x92>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	0a 94       	dec	r0
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_SetPinValue+0x8e>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	85 bb       	out	0x15, r24	; 21
				PORTC |=(value<<pinnumber);
 574:	85 b3       	in	r24, 0x15	; 21
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_SetPinValue+0xa6>
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_SetPinValue+0xa2>
 582:	48 2b       	or	r20, r24
 584:	45 bb       	out	0x15, r20	; 21
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
 586:	81 e0       	ldi	r24, 0x01	; 1
				PORTB |=(value<<pinnumber);
				break;
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
				PORTC |=(value<<pinnumber);
				break;
 588:	08 95       	ret
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
 58a:	22 b3       	in	r18, 0x12	; 18
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	06 2e       	mov	r0, r22
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_SetPinValue+0xc0>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_SetPinValue+0xbc>
 59c:	80 95       	com	r24
 59e:	82 23       	and	r24, r18
 5a0:	82 bb       	out	0x12, r24	; 18
				PORTD |=(value<<pinnumber);
 5a2:	82 b3       	in	r24, 0x12	; 18
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_SetPinValue+0xd4>
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_SetPinValue+0xd0>
 5b0:	48 2b       	or	r20, r24
 5b2:	42 bb       	out	0x12, r20	; 18
				break;
			
		}
		Local_Errorstate =ES_OK;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
				PORTC |=(value<<pinnumber);
				break;
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
 5b6:	08 95       	ret
		}
		Local_Errorstate =ES_OK;
	}
   else
   {
	 Local_Errorstate= ES_NOK;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
	 Local_Errorstate= ES_NOK;
   }
  return Local_Errorstate;
}
 5c2:	08 95       	ret

000005c4 <DIO_readpinvalue>:

ES_t DIO_readpinvalue(uint8_t portnumber,uint8_t pinnumber,uint8_t *value)
{
	ES_t LocalErrorstate;
	if(portnumber>='A' && portnumber<='D')
 5c4:	9f eb       	ldi	r25, 0xBF	; 191
 5c6:	98 0f       	add	r25, r24
 5c8:	94 30       	cpi	r25, 0x04	; 4
 5ca:	d8 f5       	brcc	.+118    	; 0x642 <DIO_readpinvalue+0x7e>
	{
		
	 switch(portnumber)
 5cc:	82 34       	cpi	r24, 0x42	; 66
 5ce:	a9 f0       	breq	.+42     	; 0x5fa <DIO_readpinvalue+0x36>
 5d0:	18 f4       	brcc	.+6      	; 0x5d8 <DIO_readpinvalue+0x14>
 5d2:	81 34       	cpi	r24, 0x41	; 65
 5d4:	31 f0       	breq	.+12     	; 0x5e2 <DIO_readpinvalue+0x1e>
 5d6:	37 c0       	rjmp	.+110    	; 0x646 <DIO_readpinvalue+0x82>
 5d8:	83 34       	cpi	r24, 0x43	; 67
 5da:	d9 f0       	breq	.+54     	; 0x612 <DIO_readpinvalue+0x4e>
 5dc:	84 34       	cpi	r24, 0x44	; 68
 5de:	29 f1       	breq	.+74     	; 0x62a <DIO_readpinvalue+0x66>
 5e0:	32 c0       	rjmp	.+100    	; 0x646 <DIO_readpinvalue+0x82>
	 {
		case PORT_A:
		    *value= ((PINA>>pinnumber)&1);
 5e2:	89 b3       	in	r24, 0x19	; 25
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_readpinvalue+0x28>
 5e8:	95 95       	asr	r25
 5ea:	87 95       	ror	r24
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_readpinvalue+0x24>
 5f0:	81 70       	andi	r24, 0x01	; 1
 5f2:	fa 01       	movw	r30, r20
 5f4:	80 83       	st	Z, r24
		break;
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
		break;
	}
	LocalErrorstate =ES_OK;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
		
	 switch(portnumber)
	 {
		case PORT_A:
		    *value= ((PINA>>pinnumber)&1);
		break;
 5f8:	08 95       	ret
		case PORT_B:
		    *value= ((PINB>>pinnumber)&1);
 5fa:	86 b3       	in	r24, 0x16	; 22
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_readpinvalue+0x40>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_readpinvalue+0x3c>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	fa 01       	movw	r30, r20
 60c:	80 83       	st	Z, r24
		break;
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
		break;
	}
	LocalErrorstate =ES_OK;
 60e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		    *value= ((PINA>>pinnumber)&1);
		break;
		case PORT_B:
		    *value= ((PINB>>pinnumber)&1);
		break;
 610:	08 95       	ret
		case PORT_C:
		   *value= ((PINC>>pinnumber)&1);
 612:	83 b3       	in	r24, 0x13	; 19
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_readpinvalue+0x58>
 618:	95 95       	asr	r25
 61a:	87 95       	ror	r24
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_readpinvalue+0x54>
 620:	81 70       	andi	r24, 0x01	; 1
 622:	fa 01       	movw	r30, r20
 624:	80 83       	st	Z, r24
		break;
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
		break;
	}
	LocalErrorstate =ES_OK;
 626:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		    *value= ((PINB>>pinnumber)&1);
		break;
		case PORT_C:
		   *value= ((PINC>>pinnumber)&1);
		break;
 628:	08 95       	ret
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
 62a:	80 b3       	in	r24, 0x10	; 16
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_readpinvalue+0x70>
 630:	95 95       	asr	r25
 632:	87 95       	ror	r24
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_readpinvalue+0x6c>
 638:	81 70       	andi	r24, 0x01	; 1
 63a:	fa 01       	movw	r30, r20
 63c:	80 83       	st	Z, r24
		break;
	}
	LocalErrorstate =ES_OK;
 63e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		   *value= ((PINC>>pinnumber)&1);
		break;
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
		break;
 640:	08 95       	ret
	}
	LocalErrorstate =ES_OK;
  }
  else
  {
     LocalErrorstate=ES_NOK;
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	08 95       	ret
		break;
		case PORT_D:
		  *value= ((PIND>>pinnumber)&1);
		break;
	}
	LocalErrorstate =ES_OK;
 646:	81 e0       	ldi	r24, 0x01	; 1
  {
     LocalErrorstate=ES_NOK;
  }
	
  return LocalErrorstate;
}
 648:	08 95       	ret

0000064a <_delay>:
 */ 
#include "timer.h"
int count_overflow=0;
void _delay()
{
	TCCR0 = 0x00;//normal mode
 64a:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;// set inital value of timer
 64c:	12 be       	out	0x32, r1	; 50
	TCCR0 |=(1<<0); // use prescaler 1024
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	81 60       	ori	r24, 0x01	; 1
 652:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |=(1<<2);
	while(count_overflow<NUM_OverFlow)
 654:	0b c0       	rjmp	.+22     	; 0x66c <_delay+0x22>
	{
		while((TIFR&(1<<0))==0);
 656:	08 b6       	in	r0, 0x38	; 56
 658:	00 fe       	sbrs	r0, 0
 65a:	fd cf       	rjmp	.-6      	; 0x656 <_delay+0xc>
		count_overflow++;
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <count_overflow+0x1>
 662:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count_overflow>
		TIFR |=(1<<0);// clear timer overflow
 666:	88 b7       	in	r24, 0x38	; 56
 668:	81 60       	ori	r24, 0x01	; 1
 66a:	88 bf       	out	0x38, r24	; 56
{
	TCCR0 = 0x00;//normal mode
	TCNT0 = 0x00;// set inital value of timer
	TCCR0 |=(1<<0); // use prescaler 1024
	//TCCR0 |=(1<<2);
	while(count_overflow<NUM_OverFlow)
 66c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count_overflow>
 670:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count_overflow+0x1>
 674:	88 3e       	cpi	r24, 0xE8	; 232
 676:	23 e0       	ldi	r18, 0x03	; 3
 678:	92 07       	cpc	r25, r18
 67a:	6c f3       	brlt	.-38     	; 0x656 <_delay+0xc>
	{
		while((TIFR&(1<<0))==0);
		count_overflow++;
		TIFR |=(1<<0);// clear timer overflow
	}
	count_overflow=0;
 67c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count_overflow+0x1>
 680:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count_overflow>
	// Timer stop;
	TCCR0 = 0x00;
 684:	13 be       	out	0x33, r1	; 51
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
